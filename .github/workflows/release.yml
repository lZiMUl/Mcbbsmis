name: Release

on:
  push:
    branches:
      - release/*

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      packages: write

    env:
      GIT_USER_NAME: ${{ vars.GIT_USER_NAME }}
      GIT_USER_EMAIL: ${{ vars.GIT_USER_EMAIL }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Configure git user
        run: |
          git config user.name "${GIT_USER_NAME}"
          git config user.email "${GIT_USER_EMAIL}"

      - name: Get repository name
        id: repository
        run: echo "name=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)" >> $GITHUB_OUTPUT

      - name: Set remote repository url
        run: git remote set-url origin https://x-access-token:${{ secrets.GH_RELEASE_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/heads/release/}" >> $GITHUB_OUTPUT

      - name: Import GPG key
        run: |
          mkdir -p ~/.gnupg
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          chmod 700 ~/.gnupg

      - name: Get GPG key ID
        id: key
        run: |
          KEY_ID=$(gpg --list-secret-keys --with-colons | awk -F':' '/^sec/ {print $5}')
          echo "id=$KEY_ID" >> $GITHUB_OUTPUT

      - name: Configure Git GPG
        run: |
          git config gpg.program gpg
          git config user.signingkey ${{ steps.key.outputs.id }}
          git config commit.gpgsign true

      - name: Create signed tag
        run: |
          git tag -s v${{ steps.version.outputs.version }} \
            -m "Release v${{ steps.version.outputs.version }}" \
            --local-user ${{ steps.key.outputs.id }}

      - name: Push tag
        run: git push origin v${{ steps.version.outputs.version }}

      - name: Zip Selected Files and Folders
        run: |
          zip -r ./release.zip \
            ./build \
            ./lang \
            ./node_modules \
            ./proto \
            ./LICENSE \
            ./package.json \
            ./package-lock.json \
            ./README.md \
            ./SECURITY.md \
            -x "./.git/*" \
            -x "./.github/*"

      - name: Publish with GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        run: |
          gh release create v${{ steps.version.outputs.version }} ./release.zip \
            --title "${{ steps.repository.outputs.name }} v${{ steps.version.outputs.version }}" \
            --generate-notes

      - name: Delete release branch
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        run: |
          BRANCH_NAME="release/${{ steps.version.outputs.version }}"
          echo "Deleting branch $BRANCH_NAME from remote..."
          git push origin --delete "$BRANCH_NAME"